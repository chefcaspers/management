use std::collections::{HashMap, VecDeque};

use counter::Counter;
use datafusion::dataframe::DataFrameWriteOptions;
use h3o::Resolution;
use itertools::Itertools;
use tabled::Tabled;

use super::kitchen::{KitchenRunner, KitchenStats};
use crate::idents::*;
use crate::simulation::events::EventPayload;
use crate::state::{
    EntityView, OrderData, OrderLineStatus, OrderStatus, PersonRole, PersonStatus, State,
};
use crate::{Entity, Error, Result, Simulatable};

// TODO: Move order data management to simulation level.

#[derive(Clone)]
pub struct OrderLine {
    pub(crate) id: OrderLineId,
    pub(crate) order_id: OrderId,
    pub(crate) item: (BrandId, MenuItemId),
}

struct OrderRouter<'a> {
    kitchens: &'a mut HashMap<KitchenId, KitchenRunner>,
    brand_to_kitchens: HashMap<BrandId, Vec<KitchenId>>,
    submit_counter: Counter<BrandId>,
}

impl<'a> OrderRouter<'a> {
    fn new(kitchens: &'a mut HashMap<KitchenId, KitchenRunner>) -> Self {
        let brand_to_kitchens = kitchens
            .iter()
            .flat_map(|(id, kitchen)| kitchen.accepted_brands().iter().map(|brand| (*brand, *id)))
            .into_group_map();
        OrderRouter {
            kitchens,
            brand_to_kitchens,
            submit_counter: Counter::new(),
        }
    }

    pub fn route_order_line(&mut self, order_line: OrderLine) -> Vec<EventPayload> {
        let mut events = Vec::new();

        let brand = order_line.item.0;
        self.submit_counter[&brand] += 1;
        let kitchen_ids = &self.brand_to_kitchens[&brand];
        let index = self.submit_counter[&brand] % kitchen_ids.len();
        if let Some(kitchen) = self.kitchens.get_mut(&kitchen_ids[index]) {
            events.push(EventPayload::order_line_updated(
                order_line.id,
                OrderLineStatus::Assigned,
                Some(*kitchen.id()),
                None,
            ));
            kitchen.queue_order_line(order_line);
        } else {
            tracing::error!("No kitchen available for brand {:?}", brand);
        }

        events
    }
}

#[derive(Clone, Debug, Tabled, Default, PartialEq, Eq)]
pub struct SiteStats {
    pub queue_length: usize,
}

impl std::ops::Add for SiteStats {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            queue_length: self.queue_length + other.queue_length,
        }
    }
}

pub struct SiteRunner {
    id: SiteId,

    /// Kitchens available at this location.
    kitchens: HashMap<KitchenId, KitchenRunner>,

    order_data: OrderData,

    /// Orders waiting to be processed at this location.
    order_queue: VecDeque<OrderId>,

    /// Order lines currently being processed at this location.
    order_lines: HashMap<OrderLineId, OrderLine>,
}

impl Entity for SiteRunner {
    type Id = SiteId;

    fn id(&self) -> &Self::Id {
        &self.id
    }
}

impl Simulatable for SiteRunner {
    fn step(&mut self, ctx: &State) -> Result<Vec<EventPayload>> {
        use EventPayload::*;

        // A buffer for all event data generated by this step
        let mut events = Vec::new();

        // Receive new orders from the state and queue them for processing
        self.receive_orders(ctx)?;

        // Route orders to kitchens and process completed order lines
        events.extend(self.process_orders(ctx)?);

        // Update order line and order statuses for completed order lines
        // Orders are updated internally based on the aggregate status of their lines
        let line_updates = events.iter().filter_map(|event| match event {
            OrderLineUpdated(payload) => Some((payload.order_line_id, payload.status)),
            _ => None,
        });
        self.order_data.update_order_lines(line_updates)?;

        // Handle order pickup
        events.extend(self.handle_order_pickup(ctx)?);

        let order_updates = events.iter().filter_map(|event| match event {
            OrderUpdated(payload) => Some((payload.order_id, payload.status.clone())),
            _ => None,
        });
        self.order_data.update_orders(order_updates)?;

        Ok(events)
    }
}

impl SiteRunner {
    pub fn try_new(id: SiteId, state: &State) -> Result<Self> {
        let kitchens = state
            .object_data()
            .kitchens(&id)?
            .map_ok(|(id, brands)| {
                Ok::<_, Box<dyn std::error::Error>>((
                    id,
                    KitchenRunner::try_new(id, brands, state)?,
                ))
            })
            .flatten()
            .try_collect()?;

        let order_data = state.orders_for_site(&id)?;
        // let site = state.object_data().site(&id)?;

        Ok(SiteRunner {
            id,
            order_data,
            kitchens,
            order_queue: VecDeque::new(),
            order_lines: HashMap::new(),
        })
    }

    pub fn order_data(&self) -> &OrderData {
        &self.order_data
    }

    pub(crate) fn snapshot(&self, ctx: &State, base_path: &url::Url) -> Result<()> {
        let orders_path = base_path
            .join(&format!(
                "sites/{}/orders/{}.parquet",
                self.id().to_string(),
                ctx.current_time().timestamp()
            ))
            .unwrap();
        let lines_path = base_path
            .join(&format!(
                "sites/{}/lines/{}.parquet",
                self.id().to_string(),
                ctx.current_time().timestamp()
            ))
            .unwrap();
        ctx.rt().block_on(async {
            ctx.ctx()
                .register_batch("orders", self.order_data().batch_orders().clone())?;
            ctx.ctx()
                .register_batch("lines", self.order_data().batch_lines().clone())?;

            let df = ctx.ctx().sql("SELECT * FROM orders").await?;
            df.write_parquet(orders_path.as_str(), DataFrameWriteOptions::new(), None)
                .await?;

            let df = ctx.ctx().sql("SELECT * FROM lines").await?;
            df.write_parquet(lines_path.as_str(), DataFrameWriteOptions::new(), None)
                .await?;

            Ok::<_, Box<dyn std::error::Error>>(())
        })
    }

    /// Receive new orders from the state and queue them for processing.
    fn receive_orders(&mut self, ctx: &State) -> Result<()> {
        let order_data = ctx.orders_for_site(&self.id)?;
        for order in order_data.orders() {
            for line in order.lines() {
                self.order_lines.insert(
                    *line.id(),
                    OrderLine {
                        id: *line.id(),
                        order_id: *line.order_id(),
                        item: (line.brand_id().try_into()?, line.menu_item_id().try_into()?),
                    },
                );
            }
            self.order_queue.push_back(*order.id());
        }
        self.order_data = self.order_data.merge(order_data)?;
        Ok(())
    }

    fn process_orders(&mut self, ctx: &State) -> Result<Vec<EventPayload>> {
        let mut events = Vec::new();

        // Route order lines to kitchens for processing.
        // A single order may contain lines from multiple brands,
        // so we need to route each line separately to a kitchen that can handle it.
        let mut router = OrderRouter::new(&mut self.kitchens);
        while let Some(order_id) = self.order_queue.pop_front() {
            if let Some(order) = self.order_data.order(&order_id) {
                for line in order.lines() {
                    if let Some(line) = self.order_lines.get(line.id()) {
                        events.extend(router.route_order_line(line.clone()));
                    }
                }
            }
        }

        // Advance kitchens and collect completed order lines
        for kitchen in self.kitchens.values_mut() {
            events.extend(kitchen.step(ctx)?);
            events.extend(kitchen.take_completed().into_iter().map(|(_, id)| {
                EventPayload::order_line_updated(
                    id,
                    OrderLineStatus::Ready,
                    Some(*kitchen.id()),
                    None,
                )
            }));
        }

        Ok(events)
    }

    pub fn stats(&self) -> SiteStats {
        SiteStats {
            queue_length: self.order_queue.len(),
        }
    }

    pub fn kitchen_stats(&self) -> impl Iterator<Item = KitchenStats> {
        self.kitchens.values().map(|kitchen| kitchen.stats())
    }

    pub fn total_kitchen_stats(&self) -> KitchenStats {
        self.kitchen_stats()
            .fold(KitchenStats::default(), |acc, stats| acc + stats)
    }

    fn handle_order_pickup(&mut self, ctx: &State) -> Result<Vec<EventPayload>> {
        let mut events = Vec::new();

        let site_location = ctx.object_data().site(&self.id)?.properties()?.lat_lng()?;
        let Some(site_location_node) = ctx.trip_planner().nearest_node(&site_location) else {
            tracing::error!("No node found for site location");
            return Err(Error::invalid_geometry("No node found for site location").into());
        };

        let couriers = ctx.population().idle_people_in_cell(
            site_location.to_cell(Resolution::Nine),
            &PersonRole::Courier,
        );
        let orders = self.order_data.orders_with_status(&OrderStatus::Ready);
        let mut router = ctx.trip_planner().get_router();
        let order_queue = couriers.zip(orders);
        for (courier, order) in order_queue {
            let destination = order.destination()?;

            // Generate the delivery route for the courier
            let Some(destination_node) = ctx.trip_planner().nearest_node(&destination) else {
                tracing::error!("Failed to find a node for order {:?}", order.id());
                events.push(EventPayload::order_failed(*order.id(), None));
                continue;
            };
            let Some(journey) =
                ctx.trip_planner()
                    .plan(&mut router, site_location_node, destination_node)
            else {
                tracing::error!("Failed to find a route for order {:?}", order.id());
                events.push(EventPayload::order_failed(*order.id(), None));
                continue;
            };
            events.push(EventPayload::person_updated(
                *courier.id(),
                PersonStatus::Delivering(*order.id(), journey),
            ));
            events.push(EventPayload::order_updated(
                *order.id(),
                OrderStatus::PickedUp,
                Some(*courier.id()),
            ));
        }

        Ok(events)
    }
}
