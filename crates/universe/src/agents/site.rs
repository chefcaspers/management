use std::collections::{HashMap, VecDeque};

use counter::Counter;
use h3o::Resolution;
use itertools::Itertools;
use tabled::Tabled;

use super::kitchen::{KitchenRunner, KitchenStats};
use crate::simulation::events::EventPayload;
use crate::state::{EntityView, OrderLineStatus, OrderStatus, PersonRole, PersonStatus, State};
use crate::{Entity, Error, Result, Simulatable};
use crate::{OrderUpdatedPayload, idents::*};

// TODO: Move order data management to simulation level.

#[derive(Clone)]
pub struct OrderLine {
    pub(crate) id: OrderLineId,
    pub(crate) order_id: OrderId,
    pub(crate) item: (BrandId, MenuItemId),
}

struct OrderRouter<'a> {
    kitchens: &'a mut HashMap<KitchenId, KitchenRunner>,
    brand_to_kitchens: HashMap<BrandId, Vec<KitchenId>>,
    submit_counter: Counter<BrandId>,
}

impl<'a> OrderRouter<'a> {
    fn new(kitchens: &'a mut HashMap<KitchenId, KitchenRunner>) -> Self {
        let brand_to_kitchens = kitchens
            .iter()
            .flat_map(|(id, kitchen)| kitchen.accepted_brands().iter().map(|brand| (*brand, *id)))
            .into_group_map();
        OrderRouter {
            kitchens,
            brand_to_kitchens,
            submit_counter: Counter::new(),
        }
    }

    pub fn route_order_line(&mut self, order_line: OrderLine) -> Vec<EventPayload> {
        let mut events = Vec::new();

        let brand = order_line.item.0;
        self.submit_counter[&brand] += 1;
        let kitchen_ids = &self.brand_to_kitchens[&brand];
        let index = self.submit_counter[&brand] % kitchen_ids.len();
        if let Some(kitchen) = self.kitchens.get_mut(&kitchen_ids[index]) {
            events.push(EventPayload::order_line_updated(
                order_line.id,
                OrderLineStatus::Assigned,
                Some(*kitchen.id()),
                None,
            ));
            kitchen.queue_order_line(order_line);
        } else {
            tracing::error!("No kitchen available for brand {:?}", brand);
        }

        events
    }
}

#[derive(Clone, Debug, Tabled, Default, PartialEq, Eq)]
pub struct SiteStats {
    pub queue_length: usize,
}

impl std::ops::Add for SiteStats {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            queue_length: self.queue_length + other.queue_length,
        }
    }
}

pub struct SiteRunner {
    id: SiteId,

    /// Kitchens available at this location.
    kitchens: HashMap<KitchenId, KitchenRunner>,

    // order_data: OrderData,
    /// Orders waiting to be processed at this location.
    order_queue: VecDeque<OrderId>,

    /// Order lines currently being processed at this location.
    order_lines: HashMap<OrderLineId, OrderLine>,
}

impl Entity for SiteRunner {
    type Id = SiteId;

    fn id(&self) -> &Self::Id {
        &self.id
    }
}

impl Simulatable for SiteRunner {
    fn step(&mut self, events: &[EventPayload], ctx: &State) -> Result<Vec<EventPayload>> {
        let new_orders = events
            .iter()
            .filter_map(|event| match event {
                EventPayload::OrderUpdated(
                    payload @ OrderUpdatedPayload {
                        status: OrderStatus::Submitted,
                        ..
                    },
                ) => Some(payload.order_id),
                _ => None,
            })
            .collect_vec();
        self.receive_orders(&new_orders, ctx)?;

        // A buffer for all event data generated by this step
        let mut events = Vec::new();

        // Route orders to kitchens and process completed order lines
        events.extend(self.process_orders(ctx)?);

        // Handle order pickup
        events.extend(self.handle_order_pickup(ctx)?);

        Ok(events)
    }
}

impl SiteRunner {
    pub fn try_new(id: SiteId, state: &State) -> Result<Self> {
        let kitchens = state
            .objects()
            .kitchens(&id)?
            .map_ok(|(id, brands)| Ok::<_, Error>((id, KitchenRunner::try_new(id, brands, state)?)))
            .flatten()
            .try_collect()?;

        Ok(SiteRunner {
            id,
            kitchens,
            order_queue: VecDeque::new(),
            order_lines: HashMap::new(),
        })
    }

    /// Receive new orders from the state and queue them for processing.
    pub(crate) fn receive_orders<'a>(&mut self, orders: &[OrderId], ctx: &State) -> Result<()> {
        let orders = orders
            .iter()
            .flat_map(|order_id| ctx.orders().order(order_id));
        for order in orders {
            for line in order.lines() {
                self.order_lines.insert(
                    *line.id(),
                    OrderLine {
                        id: *line.id(),
                        order_id: *line.order_id(),
                        item: (line.brand_id().try_into()?, line.menu_item_id().try_into()?),
                    },
                );
            }
            self.order_queue.push_back(*order.id());
        }
        Ok(())
    }

    fn process_orders(&mut self, ctx: &State) -> Result<Vec<EventPayload>> {
        let mut events = Vec::new();

        // Route order lines to kitchens for processing.
        // A single order may contain lines from multiple brands,
        // so we need to route each line separately to a kitchen that can handle it.
        let mut router = OrderRouter::new(&mut self.kitchens);
        while let Some(order_id) = self.order_queue.pop_front() {
            if let Some(order) = ctx.orders().order(&order_id) {
                for line in order.lines() {
                    if let Some(line) = self.order_lines.get(line.id()) {
                        events.extend(router.route_order_line(line.clone()));
                    }
                }
            }
        }

        // Advance kitchens and collect completed order lines
        for kitchen in self.kitchens.values_mut() {
            events.extend(kitchen.step(ctx)?);
            events.extend(kitchen.take_completed().into_iter().map(|(_, id)| {
                EventPayload::order_line_updated(
                    id,
                    OrderLineStatus::Ready,
                    Some(*kitchen.id()),
                    None,
                )
            }));
        }

        Ok(events)
    }

    pub fn stats(&self) -> SiteStats {
        SiteStats {
            queue_length: self.order_queue.len(),
        }
    }

    pub fn kitchen_stats(&self) -> impl Iterator<Item = KitchenStats> {
        self.kitchens.values().map(|kitchen| kitchen.stats())
    }

    pub fn total_kitchen_stats(&self) -> KitchenStats {
        self.kitchen_stats()
            .fold(KitchenStats::default(), |acc, stats| acc + stats)
    }

    fn handle_order_pickup(&mut self, ctx: &State) -> Result<Vec<EventPayload>> {
        let mut events = Vec::new();

        let site_location = ctx.objects().site(&self.id)?.properties()?.lat_lng()?;
        let planner = ctx
            .trip_planner(&self.id)
            .ok_or(Error::invalid_data("no planner registered for site"))?;

        let Some(site_location_node) = planner.nearest_node(&site_location) else {
            tracing::error!("No node found for site location");
            return Err(Error::invalid_geometry("No node found for site location"));
        };

        let couriers = ctx.population().idle_people_in_cell(
            site_location.to_cell(Resolution::Eight),
            &PersonRole::Courier,
        );
        let orders = ctx
            .orders()
            .orders_with_status(&self.id, &OrderStatus::Ready);

        let mut router = planner.get_router();

        let order_queue = orders.zip(couriers);
        for (order, courier) in order_queue {
            let destination = order.destination()?;

            // Generate the delivery route for the courier
            let Some(destination_node) = planner.nearest_node(&destination) else {
                tracing::error!(target: "site-agent", "Failed to find a node for order {:?}", order.id());
                events.push(EventPayload::order_failed(*order.id(), None));
                continue;
            };
            let Some(journey) = planner.plan(&mut router, site_location_node, destination_node)
            else {
                tracing::error!("Failed to find a route for order {:?}", order.id());
                events.push(EventPayload::order_failed(*order.id(), None));
                continue;
            };

            tracing::debug!(target: "site-agent", "Courier {:?} is delivering order {:?}", courier.id(), order.id());
            events.push(EventPayload::person_updated(
                *courier.id(),
                PersonStatus::Delivering(*order.id(), journey),
            ));
            events.push(EventPayload::order_updated(
                *order.id(),
                OrderStatus::PickedUp,
                Some(*courier.id()),
            ));
        }

        Ok(events)
    }
}
