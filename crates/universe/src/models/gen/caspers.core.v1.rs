// @generated
// This file is @generated by prost-build.
/// Physical locations where kitchens operate
///
/// Multiple kitchens are located within each location.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Location {
    /// Unique identifier for the location
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the location
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// City of the location
    #[prost(string, tag="3")]
    pub city: ::prost::alloc::string::String,
    /// State of the location
    #[prost(string, tag="4")]
    pub state: ::prost::alloc::string::String,
    /// Zip code of the location
    #[prost(string, tag="5")]
    pub zip_code: ::prost::alloc::string::String,
    /// Street address of the location
    #[prost(string, tag="6")]
    pub street_address: ::prost::alloc::string::String,
}
impl ::prost::Name for Location {
const NAME: &'static str = "Location";
const PACKAGE: &'static str = "caspers.core.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.core.v1.Location".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.core.v1.Location".into() }}
/// A company that owns and operates brands and kitchens
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vendor {
    /// Unique identifier for the vendor
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the vendor
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag="3")]
    pub logo_url: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for Vendor {
const NAME: &'static str = "Vendor";
const PACKAGE: &'static str = "caspers.core.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.core.v1.Vendor".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.core.v1.Vendor".into() }}
/// Physical cooking spaces within locations, operated by vendors
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kitchen {
    /// Unique identifier for the kitchen
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the kitchen
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for Kitchen {
const NAME: &'static str = "Kitchen";
const PACKAGE: &'static str = "caspers.core.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.core.v1.Kitchen".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.core.v1.Kitchen".into() }}
/// Distinct restaurant brands
///
/// Brands are owned by vendors and operate in specific kitchens
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Brand {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for Brand {
const NAME: &'static str = "Brand";
const PACKAGE: &'static str = "caspers.core.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.core.v1.Brand".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.core.v1.Brand".into() }}
/// Menus comprise all offerings by a single brand
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Menu {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for Menu {
const NAME: &'static str = "Menu";
const PACKAGE: &'static str = "caspers.core.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.core.v1.Menu".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.core.v1.Menu".into() }}
/// Menu items are individual dishes within a menu
///
/// Individual food/drink products with details like price, description, and images
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MenuItem {
    /// Unique identifier for the menu item
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the menu item
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// description of the menu item
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    /// Price of the menu item in USD
    #[prost(double, tag="4")]
    pub price: f64,
    /// URL to an image representing the menu item
    #[prost(string, tag="5")]
    pub image_url: ::prost::alloc::string::String,
}
impl ::prost::Name for MenuItem {
const NAME: &'static str = "MenuItem";
const PACKAGE: &'static str = "caspers.core.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.core.v1.MenuItem".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.core.v1.MenuItem".into() }}
include!("caspers.core.v1.serde.rs");
// @@protoc_insertion_point(module)