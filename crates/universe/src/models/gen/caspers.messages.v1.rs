// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderStatus {
    /// The unique identifier for the order.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// The status of the order.
    #[prost(enumeration="Status", tag="2")]
    pub status: i32,
}
/// An order represents a customer's request to purchase one or more products.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    /// The unique identifier for the order.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// The unique identifier for the customer.
    #[prost(string, tag="2")]
    pub customer_id: ::prost::alloc::string::String,
    /// The line items in the order.
    #[prost(message, repeated, tag="3")]
    pub line_items: ::prost::alloc::vec::Vec<LineItem>,
}
/// A line item represents a single product in an order.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LineItem {
    /// The unique identifier for the line item.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// The unique identifier for the product.
    #[prost(string, tag="3")]
    pub product_id: ::prost::alloc::string::String,
    /// The quantity of the product in the line item.
    #[prost(int32, tag="4")]
    pub quantity: i32,
    /// The price of the product in the line item.
    #[prost(double, tag="5")]
    pub price: f64,
    /// The total price of the line item.
    #[prost(double, tag="6")]
    pub total_price: f64,
}
/// The status of an order.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    /// default status
    Unspecified = 0,
    /// status received
    Received = 1,
    /// status accepted
    Accepted = 2,
    /// status processing
    Processing = 3,
    /// status ready
    Ready = 4,
    /// status picked up
    PickedUp = 5,
    /// status delivered
    Delivered = 6,
    /// status cancelled
    Cancelled = 7,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::Unspecified => "STATUS_UNSPECIFIED",
            Status::Received => "STATUS_RECEIVED",
            Status::Accepted => "STATUS_ACCEPTED",
            Status::Processing => "STATUS_PROCESSING",
            Status::Ready => "STATUS_READY",
            Status::PickedUp => "STATUS_PICKED_UP",
            Status::Delivered => "STATUS_DELIVERED",
            Status::Cancelled => "STATUS_CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "STATUS_RECEIVED" => Some(Self::Received),
            "STATUS_ACCEPTED" => Some(Self::Accepted),
            "STATUS_PROCESSING" => Some(Self::Processing),
            "STATUS_READY" => Some(Self::Ready),
            "STATUS_PICKED_UP" => Some(Self::PickedUp),
            "STATUS_DELIVERED" => Some(Self::Delivered),
            "STATUS_CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
include!("caspers.messages.v1.serde.rs");
// @@protoc_insertion_point(module)