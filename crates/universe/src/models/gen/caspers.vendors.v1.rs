// @generated
// This file is @generated by prost-build.
/// A company that owns brands and operates kitchens.
///
/// Users of the Caspers platform can create and manage vendors.
/// They act as customers of the ghost kitchen business we simulate,
/// offering food for delivery to their customers using services
/// provided by the ghost kitchen company.
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vendor {
    /// Unique identifier for the vendor
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the vendor
    ///
    /// Must be unique among all vendors
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// Display name of the vendor for use in the UI
    #[prost(string, optional, tag="3")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// URL of the vendor's logo
    ///
    /// for display purposes
    #[prost(string, optional, tag="5")]
    pub logo_url: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for Vendor {
const NAME: &'static str = "Vendor";
const PACKAGE: &'static str = "caspers.vendors.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.vendors.v1.Vendor".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.vendors.v1.Vendor".into() }}
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListVendorsRequest {
    /// The maximum number of results per page that should be returned.
    #[prost(int32, optional, tag="2")]
    pub max_results: ::core::option::Option<i32>,
    /// Opaque pagination token to go to next page based on previous query.
    #[prost(string, optional, tag="3")]
    pub page_token: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for ListVendorsRequest {
const NAME: &'static str = "ListVendorsRequest";
const PACKAGE: &'static str = "caspers.vendors.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.vendors.v1.ListVendorsRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.vendors.v1.ListVendorsRequest".into() }}
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListVendorsResponse {
    #[prost(message, repeated, tag="1")]
    pub vendors: ::prost::alloc::vec::Vec<Vendor>,
    /// The next_page_token value to include in the next List request.
    #[prost(string, optional, tag="2")]
    pub next_page_token: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for ListVendorsResponse {
const NAME: &'static str = "ListVendorsResponse";
const PACKAGE: &'static str = "caspers.vendors.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.vendors.v1.ListVendorsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.vendors.v1.ListVendorsResponse".into() }}
#[cfg_attr(feature = "python", ::pyo3::pyclass(get_all, set_all))]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateVendorRequest {
    /// Name of the vendor
    ///
    /// Must be unique among all vendors
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// Display name of the vendor for use in the UI
    #[prost(string, optional, tag="3")]
    pub display_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    /// URL of the vendor's logo
    ///
    /// for display purposes
    #[prost(string, optional, tag="5")]
    pub logo_url: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for CreateVendorRequest {
const NAME: &'static str = "CreateVendorRequest";
const PACKAGE: &'static str = "caspers.vendors.v1";
fn full_name() -> ::prost::alloc::string::String { "caspers.vendors.v1.CreateVendorRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/caspers.vendors.v1.CreateVendorRequest".into() }}
include!("caspers.vendors.v1.serde.rs");
// @@protoc_insertion_point(module)