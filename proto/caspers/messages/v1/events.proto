/**
 * CloudEvent Protobuf Format
 *
 * - Required context attributes are explicitly represented.
 * - Optional and Extension context attributes are carried in a map structure.
 * - Data may be represented as binary, text, or protobuf messages.
 */

syntax = "proto3";

package caspers.messages.v1;

import "buf/validate/validate.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

message CloudEvent {
  // Identifies the event. Producers MUST ensure that source + id
  // is unique for each distinct event. If a duplicate event is re-sent
  // (e.g. due to a network error) it MAY have the same id. Consumers
  // MAY assume that Events with identical source and id are duplicates.
  string id = 1 [(buf.validate.field).string.min_len = 1];

  // Identifies the context in which an event happened. Often this will
  // include information such as the type of the event source, the organization
  // publishing the event or the process that produced the event. The exact syntax
  // and semantics behind the data encoded in the URI is defined by the event producer.
  //
  // Producers MUST ensure that source + id is unique for each distinct event.
  //
  // An application MAY assign a unique source to each distinct producer,
  // which makes it easy to produce unique IDs since no other producer will
  // have the same source. The application MAY use UUIDs, URNs, DNS authorities
  // or an application-specific scheme to create unique source identifiers.
  // A source MAY include more than one producer. In that case the producers MUST
  // collaborate to ensure that source + id is unique for each distinct event.
  string source = 2 [(buf.validate.field).string.uri_ref = true];

  // The version of the CloudEvents specification which the event uses.
  // This enables the interpretation of the context. Compliant event producers
  // MUST use a value of 1.0 when referring to this version of the specification.
  //
  // Currently, this attribute will only have the 'major' and 'minor' version
  // numbers included in it. This allows for 'patch' changes to the specification
  // to be made without changing this property's value in the serialization.
  // Note: for 'release candidate' releases a suffix might be used for testing purposes.
  string spec_version = 3;

  // This attribute contains a value describing the type of event related to the
  // originating occurrence. Often this attribute is used for routing, observability
  // policy enforcement, etc. The format of this is producer defined and might
  // include information such as the version of the type
  string type = 4 [(buf.validate.field).string.min_len = 1];

  // Optional & Extension Attributes
  map<string, CloudEventAttributeValue> attributes = 5;

  // -- CloudEvent Data (Bytes, Text, or Proto)
  oneof data {
    bytes binary_data = 6;

    string text_data = 7;

    google.protobuf.Any proto_data = 8;
  }

  // Timestamp of when the occurrence happened. If the time of the
  // occurrence cannot be determined then this attribute MAY be set
  // to some other time (such as the current time) by the CloudEvents
  // producer, however all producers for the same source MUST be
  // consistent in this respect. In other words, either they all use the
  // actual time of the occurrence or they all use the same algorithm to
  // determine the value used.
  google.protobuf.Timestamp time = 9;

  /**
   * The CloudEvent specification defines
   * seven attribute value types...
   */
  message CloudEventAttributeValue {
    oneof attr {
      bool ce_boolean = 1;
      int32 ce_integer = 2;
      string ce_string = 3;
      bytes ce_bytes = 4;

      string ce_uri = 5 [(buf.validate.field).string.uri = true];

      string ce_uri_ref = 6 [(buf.validate.field).string.uri_ref = true];

      google.protobuf.Timestamp ce_timestamp = 7;
    }
  }
}

/**
 * CloudEvent Protobuf Batch Format
 *
 */
message CloudEventBatch {
  repeated CloudEvent events = 1;
}
